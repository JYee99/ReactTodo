import React, { useState, useRef, useEffect } from "react";
import TodoForm from "./TodoForm";
import TodoList from "./TodoList";
import SideBar from "./SideBar";
import * as S from "./FormStyles";

const Todo = () => {
  const inputInitial = {
    todo: "",
    date: {
      mon: "",
      day: "",
    },
  };
  const initialTodos = JSON.parse(localStorage.getItem("myTodos")) || [];
  const initialCategories = [
    { id: "high", value: "üî• Ï§ëÏöîÎèÑ (ÏµúÏÉÅ)" },
    { id: "upperMid", value: "üî¥ Ï§ëÏöîÎèÑ (ÏÉÅ)" },
    { id: "mid", value: "üü° Ï§ëÏöîÎèÑ (Ï§ë)" },
    { id: "lowerMid", value: "üü¢ Ï§ëÏöîÎèÑ (Ìïò)" },
    { id: "low", value: "üîµ Ï§ëÏöîÎèÑ (ÏµúÌïò)" },
  ];
  const filters = [
    { id: "olders", value: "‚è≥ Í∏∞Ìïú ‚ñ≤" },
    { id: "newest", value: "‚è≥ Í∏∞Ìïú ‚ñº" },
    { id: "completed", value: " ‚úî ÏôÑÎ£åÎêú Ìï≠Î™©" },
    { id: "incomplete", value: "‚ùå ÎØ∏ÏôÑÎ£å Ìï≠Î™©" },
    { id: "expired", value: "‚è∞ Í∏∞Ìïú ÎßåÎ£å" },
  ];
  const maxLength = 15;
  const [todos, setTodos] = useState(initialTodos);
  const [inputVal, setInputVal] = useState(inputInitial);
  // Ïó¨Îü¨ Í∞úÏùò inputÏùÑ Ï∞∏Ï°∞ÌïòÍ∏∞ ÏúÑÌïú Í∞ùÏ≤¥
  const inputRefs = useRef({});
  const [masterCheck, setMasterCheck] = useState(false);
  const [category, setCategory] = useState(initialCategories);
  const [dateConfirm, setDateConfirm] = useState(false);

  const [inputCategory, setInputCategory] = useState("Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù");
  const [isOpen, setIsOpen] = useState(false);

  const [selectedCategory, setSelectedCategory] = useState([]);
  const [fileredTodos, setFilteredTodos] = useState(initialTodos);

  const newDate = new Date();
  const currentDate = {
    mon: newDate.getMonth() + 1,
    day: newDate.getDate(),
  };
  const isEditing = todos.some((todo) => todo.edit);

  const updateTodosLocal = () => {
    localStorage.setItem("myTodos", JSON.stringify(todos));
  };
  // Í∏ÄÏûê Ïàò Ï†úÌïú Ìï®Ïàò
  const checkLength = (length) => {
    if (length > maxLength) {
      alert("15Í∏ÄÏûê Ïù¥ÎÇ¥Î°ú ÏûëÏÑ±Ìï¥ Ï£ºÏÑ∏Ïöî.");
      return;
    }
    if (length < 1) {
      alert("1Í∏ÄÏûê Ïù¥ÏÉÅ ÏûëÏÑ±Ìï¥ Ï£ºÏÑ∏Ïöî.");
      return;
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const inputMon = Number(inputVal.date.mon);
    const inputDay = Number(inputVal.date.day);
    if (checkLength(inputVal.todo.length) || inputVal.todo.trim() === "")
      return;
    if (currentDate.mon > inputMon) {
      return alert("ÎÇ†Ïßú(Ïõî)Î•º Îã§Ïãú ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî.");
    } else if (currentDate.mon === inputMon && currentDate.day > inputDay) {
      return alert("ÎÇ†Ïßú(Ïùº)Î•º Îã§Ïãú ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî.");
    }
    const newTodo = {
      id: Math.random().toString(),
      todo: inputVal.todo,
      date: inputVal.date,
      checked: false,
      edit: false,
      category: inputCategory,
    };
    updateTodosLocal();
    setTodos((prev) => [newTodo, ...prev]);
    setInputVal(inputInitial);
    setInputCategory("Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù");
  };

  const onChangeInput = (e) => {
    const { name, value } = e.target;
    setInputVal((prev) => ({
      ...prev,
      [name]: value,
    }));
  };
  const onChangeDate = (e) => {
    const { name, value } = e.target;
    setInputVal((prev) => ({
      ...prev,
      date: {
        ...prev.date,
        [name]: value,
      },
    }));
  };

  const handleChecked = (id) => {
    setTodos((prev) => {
      const updatedTodos = prev.map((todo) =>
        todo.id === id ? { ...todo, checked: !todo.checked } : todo
      );

      localStorage.setItem("myTodos", JSON.stringify(updatedTodos));
      return updatedTodos;
    });
  };

  const handleEdit = (id) => {
    setTodos((prev) =>
      prev.map((todo) =>
        // ÌÅ¥Î¶≠Ìïú todoÏùò idÏôÄ ÏùºÏπòÌïòÎ©¥ edit Í∞íÏùÑ Î∞òÎåÄÎ°ú Î≥ÄÍ≤Ω
        todo.id === id ? { ...todo, edit: !todo.edit } : todo
      )
    );

    // Ìè¨Ïª§Ïä§Î•º Ìï¥Îãπ idÏùò inputÏóê ÏÑ§Ï†ï
    setTimeout(() => {
      if (inputRefs.current[id]) {
        inputRefs.current[id].focus();
      }
    }, 0);
    updateTodosLocal();
  };

  const handleEditInput = (e, id) => {
    const newValue = e.target.value;
    checkLength(newValue.length);
    setTodos((prev) =>
      prev.map((todo) => (todo.id === id ? { ...todo, todo: newValue } : todo))
    );
  };

  const handleDelete = (id) => {
    // prevÎäî Ïù¥Ï†Ñ todos Î∞∞Ïó¥Ïù¥Î©∞, setTodosÏùò Ïù∏ÏûêÎ°ú Ï†ÑÎã¨Îê®
    // filter() Ìï®ÏàòÎäî Î∞∞Ïó¥ÏùÑ ÏàúÌöåÌïòÎ©¥ÏÑú Ï°∞Í±¥Ïóê ÎßûÎäî ÏöîÏÜåÎßå ÏÉàÎ°úÏö¥ Î∞∞Ïó¥Î°ú Î∞òÌôòÌï®
    // todo.id !== idÍ∞Ä trueÏù∏ ÏöîÏÜåÎßå Ïú†ÏßÄÌïòÍ≥†, ÏùºÏπòÌïòÎäî idÎ•º Í∞ÄÏßÑ ÏöîÏÜåÎäî Ï†úÍ±∞Îê®
    setTodos((prev) => prev.filter((todo) => todo.id !== id));
    updateTodosLocal();
  };

  useEffect(() => {
    setMasterCheck(todos.every((todo) => todo.checked)); // todosÏùò ÏÉÅÌÉúÏóê Îî∞Îùº masterCheck ÎèôÍ∏∞Ìôî
  }, [todos]);

  const handleMasterCheck = () => {
    // Í∏∞ÌïúÏù¥ ÎÇ®ÏïÑ ÏûàÎäî Todo ÌïÑÌÑ∞ÎßÅ
    const availableTodos = todos.filter((todo) => {
      const todoMonth = Number(todo.date.mon);
      const todoDay = Number(todo.date.day);

      return (
        todoMonth > currentDate.mon || // ÎØ∏Îûò ÎÇ†Ïßú
        (todoMonth === currentDate.mon && todoDay >= currentDate.day) // Í∞ôÏùÄ Îã¨Ïù¥Î©¥ Ïò§Îäò Ïù¥ÌõÑ ÎÇ†ÏßúÎßå
      );
    });

    // Ï≤¥ÌÅ¨ Í∞ÄÎä•Ìïú Ìï≠Î™©Ïù¥ Î™®Îëê Ï≤¥ÌÅ¨ ÏÉÅÌÉúÏù∏ÏßÄ ÌôïÏù∏ (Î™®Îëê Ï≤¥ÌÅ¨ -> Ìï¥Ï†ú, ÏïÑÎãàÎ©¥ Ï≤¥ÌÅ¨)
    const allAvailableChecked = availableTodos.every((todo) => todo.checked);
    const newCheckState = !allAvailableChecked; // ÌÜ†Í∏Ä Í∏∞Îä• Íµ¨ÌòÑ

    // todos ÏóÖÎç∞Ïù¥Ìä∏ (Í∏∞ÌïúÏù¥ ÎÇ®ÏùÄ Ìï≠Î™©Îßå checked ÏÉÅÌÉú Î≥ÄÍ≤Ω)
    const updatedTodos = todos.map((todo) => {
      const todoMonth = Number(todo.date.mon);
      const todoDay = Number(todo.date.day);
      const isExpired =
        todoMonth < currentDate.mon ||
        (todoMonth === currentDate.mon && todoDay < currentDate.day);

      return isExpired ? todo : { ...todo, checked: newCheckState }; // Í∏∞ÌïúÏù¥ ÏßÄÎÇú Ìï≠Î™©ÏùÄ Î≥ÄÍ≤Ω X
    });

    setTodos(updatedTodos);
    setMasterCheck(newCheckState);
  };
  useEffect(() => {
    // Í∏∞ÌïúÏù¥ ÎÇ®ÏïÑ ÏûàÎäî Ìï≠Î™©Îì§Îßå ÎåÄÏÉÅÏúºÎ°ú masterCheck ÏÉÅÌÉú Í∞±Ïã†
    const availableTodos = todos.filter((todo) => {
      const todoMonth = Number(todo.date.mon);
      const todoDay = Number(todo.date.day);

      return (
        todoMonth > currentDate.mon ||
        (todoMonth === currentDate.mon && todoDay >= currentDate.day)
      );
    });

    // Î™®Îì† Í∏∞ÌïúÏù¥ ÎÇ®ÏùÄ Ìï≠Î™©Ïù¥ Ï≤¥ÌÅ¨ ÏÉÅÌÉúÎ©¥ masterCheckÎèÑ Ï≤¥ÌÅ¨ ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤Ω
    setMasterCheck(
      availableTodos.length > 0 && availableTodos.every((todo) => todo.checked)
    );
    updateTodosLocal();
  }, [masterCheck]);

  const handleSelect = (category) => {
    setInputCategory(category);
    setIsOpen(false); // ÏÑ†ÌÉù ÌõÑ Î¶¨Ïä§Ìä∏ Îã´Í∏∞
  };

  const handleCategoryClick = (value) => {
    setSelectedCategory((prev) => {
      if (prev.includes(value)) {
        return prev.filter((category) => category !== value);
      } else {
        return [...prev, value];
      }
    });
  };
  useEffect(() => {
    if (selectedCategory.length === 0) {
      setFilteredTodos(todos);
    } else {
      setFilteredTodos(
        todos.filter((todo) => selectedCategory.includes(todo.category))
      );
    }
  }, [selectedCategory, todos]);

  return (
    <>
      <S.RootContainer>
        <S.TodoContainer>
          <TodoForm
            handleSubmit={handleSubmit}
            onChangeInput={onChangeInput}
            inputVal={inputVal}
            onChangeDate={onChangeDate}
            maxLength={maxLength}
            category={category}
            setIsOpen={setIsOpen}
            handleSelect={handleSelect}
            inputCategory={inputCategory}
            isOpen={isOpen}
          />
          <TodoList
            todos={fileredTodos}
            inputRefs={inputRefs}
            maxLength={maxLength}
            handleChecked={handleChecked}
            handleEditInput={handleEditInput}
            handleEdit={handleEdit}
            handleDelete={handleDelete}
            isEditing={isEditing}
            masterCheck={masterCheck}
            handleMasterCheck={handleMasterCheck}
            currentDate={currentDate}
            dateConfirm={dateConfirm}
            setDateConfirm={setDateConfirm}
          />
        </S.TodoContainer>
        <S.SideBarContainer>
          <S.FilterContainer>
            <S.FilterTitle>FILTER</S.FilterTitle>
            <S.FilterUl>
              {filters.map((list) => {
                return (
                  <S.FilterList key={list.id}>
                    <S.FilterCheckbox type="checkbox" name={list.id} />
                    <S.SideBarLiText>{list.value}</S.SideBarLiText>
                  </S.FilterList>
                );
              })}
            </S.FilterUl>
          </S.FilterContainer>
          <S.CategoryContainer>
            <S.CategoryTitle>CATEGORY</S.CategoryTitle>
            <S.FilterUl>
              {category.map((list) => {
                return (
                  <S.CategoryList key={list.id}>
                    <S.FilterCheckbox
                      type="checkbox"
                      name={list.id}
                      onClick={() => handleCategoryClick(list.value)}
                    />
                    <S.SideBarLiText>{list.value}</S.SideBarLiText>
                  </S.CategoryList>
                );
              })}
            </S.FilterUl>
          </S.CategoryContainer>
        </S.SideBarContainer>
        {/* <SideBar categories={categories} filters={filters} /> */}
      </S.RootContainer>
    </>
  );
};

export default Todo;
